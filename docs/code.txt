//export const endpoint = " http://localhost:3001/dentistas";
//export const endpoint = "https://api.github.com/users";
//import { Box } from "@mui/material";


const getDentist = async () => {
    const res = await fetch("https://jsonplaceholder.typicode.com/users");
    const data = await res.json();
    console.log(data);
    setDentist(data);
  };
useEffect(() => {
    getDentist();
  }, []);


<main className="">
      <h1>Home</h1>
      <div className="card-grid">
        {dentist.length
          ? dentist.map((dentist) => <Card key={dentist.id} name={dentist.name} username={dentist.username} id={dentist.id}/>)
          : null}
      </div>
    </main>





    CONTEXT PROVIDER IDEAS CON CSS POR ARCHIVO


    GLOBALCONTEXT.JSX

    import React, { createContext, useState, useMemo, useReducer } from "react";

const initialState = { theme: "light", data: [] };


const reducer = (state, action) => {
	switch (action.type) {
		case "TOGGLE_THEME":
			return {
				...state,
				theme: state.theme === "light" ? "dark" : "light",
			};
		case "ADD_DATA":
			return {
				...state,
				data: [...state.data, action.payload],
			};
		default:
			return state;
	}
};




export const ContextGlobal = createContext(undefined);

export const ContextProvider = ({ children }) => {
	const [state, dispatch] = useReducer(reducer, initialState);

	const toggleTheme = () => {
		dispatch({ type: "TOGGLE_THEME" });
	};

	const addData = (newData) => {
		dispatch({ type: "ADD_DATA", payload: newData });
	};

	const value = useMemo(() => {
		return {
			theme: state.theme,
			data: state.data,
			toggleTheme,
			addData,
		};
	}, [state.theme, state.data]);

	return (
		<ContextGlobal.Provider value={value}>{children}</ContextGlobal.Provider>
	);
};

export default ContextProvider;


Navbar

const { state, dispatch } = useContext(ContextGlobal);

	const toggleTheme = () => {
		dispatch({ type: "TOGGLE_THEME" });
	};


  EN EL ICON DEL Navbar
  {state.theme === "light" ? (
						<DarkModeIcon onClick={toggleTheme} />
					) : (
						<DarkModeIcon onClick={toggleTheme} />
					)}


      	/* const { toggleTheme } = useContext(ContextGlobal); */



		
	
/*     const [img, setImagen] = useState("./logo-n-b.jpg");

	const cambiarImagen = () => {
		setImagen("./logo-n.jpg");
	};

	const restaurarImagen = () => {
		setImagen("./logo-n-b.jpg");
	};

	useEffect(() => {
		// actualiza el estado de la imagen solamente cuando el componente se haya montado
		setImagen("./logo-n-b.jpg");
	}, []);
 */

 {/* <img onMouseOver={cambiarImagen()} onMouseOut={restaurarImagen()} src={img} alt="company-logo" /> */}


 
   /*  useEffect(() => {
			const fetchData = () => {
				try {
					const response = axios.get(`${endpoint}/${id}`);
					setValues([response.data]); // Convertir los datos en un arreglo
				} catch (error) {
					console.log(error);
				}
			};

			fetchData();
		}, []); */


						/* sx={{
					border: "1px solid white",
					"&:hover": {
						borderColor: "dodgerblue",
					},
					borderRadius: "20px",
					"& .MuiOutlinedInput-root.Mui-focused": {
						outline: "none",
					},
				}} */



				

	/* const State = {
		theme, //tiene bool =>llama al com que quiero
		handleTheme, //=>lo maneja si es true ponlo false
	}; */